{
	/*
	// Place your snippets for JavaScript here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	"Print to console": {
		"prefix": "log",
		"body": [
			"console.log('$1');",
			"$2"
		],
		"description": "Log output to console"
	}
	*/

	"object literal": {
		"prefix": "ol",
		"body": [
			"{",
			"}$1"
		]
	},

	"object method": {
		"prefix": "of",
		"body": [
			"$1 ($2) {",
			"},"
		]
	},

	// types
	"type": {
		"prefix": "@type",
		"body": "/** @type {$1} */",
	},
	
	// test
	"describe": {
		"prefix": "describe-test",
		"body": [
			"describe('$1', () => {",
			"});"
		]
	},
	"it": {
		"prefix": "it-test",
		"body": [
			"it('$1', () => {",
			"});"
		]
	},
	"beforeEach": {
		"prefix": "beforeEach-test",
		"body": [
			"beforeEach(() => {",
			"\t$1",
			"});"
		]
	},
	"afterEach": {
		"prefix": "afterEach-test",
		"body": [
			"afterEach(() => {",
			"\t$1",
			"});"
		]
	},
	"expect-toBe": {
		"prefix": "expect-test",
		"body": "expect($1).${2:toBe}($3)",
	},

	"querySelector": {
		"prefix": "qs",
		"body": [
			"document.querySelector('${1:selector}')${0:;}"
		]
	},
	"addEventListener": {
		"prefix": "add-event-listener",
		"body": [
			"${1:el}.addEventListener('${2:click}', (event) => {",
			"\t$0",
			"});"
		]
	},
	"Arrow function": {
		"prefix": "af",
		"body": [
			"($2) => {",
			"}${1:;}"
		]
	},
	"Inline arrow function": {
		"prefix": "aff",
		"body": [
			"($2) => $3${1:,}"
		]
	},
	"simple console.log": {
		"prefix": "clog",
		"body": [
			"console.log($1);",
		]
	},
	"console.log for development": {
		"prefix": "cld",
		"body": [
			"console.log(`# $1`);",
		]
	},
	"console.log with values": {
		"prefix": "clv",
		"body": [
			"console.log('# $1', $1);",
		]
	},
	"console.log with properties": {
		"prefix": "clp",
		"body": [
			"console.log('# $1', $2);",
		]
	},
	"throw new Error": {
		"prefix": "throw",
		"body": [
			"throw new Error('$1')",
		]
	},
	"promise": {
		"prefix": "promise",
		"body": [
			"new Promise((resolve, reject) => {",
			"\t$0",
			"});"
		]
	}
}