{
	// Place your snippets for typescriptreact here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	
	"simple console.log": {
		"prefix": "clog",
		"body": [
			"console.log($1);",
		]
	},
	"console.log for development": {
		"prefix": "cld",
		"body": [
			"console.log(`# $1`);",
		]
	},
	"console.log with values": {
		"prefix": "clv",
		"body": [
			"console.log('# $1', $1);",
		]
	},
	"console.log with properties": {
		"prefix": "clp",
		"body": [
			"console.log('# $1', $2);",
		]
	},
	"Bind method to this": {
		"prefix": "bind-to-this",
		"body": "this.$1 = this.$1.bind(this);"
	},
	"Arrow function": {
		"prefix": "af",
		"body": [
			"($2) => {",
			"}${1:;}"
		]
	},
	"Inline arrow function": {
		"prefix": "aff",
		"body": [
			"($2) => $3${1:,}"
		]
	},
	"Arrow function for elements": {
		"prefix": "afe",
		"body": [
			"($1) => (",
			"\t$2",
			")"
		]
	},
	// ${1:HelloWorld}
	"TSX file": {
		"prefix": "tsx-file",
		"body": [
			"import * as React from 'react';",
			"import { connect } from 'react-redux';",
			"import { IState } from 'src/reducers';",
			"import './${1:HelloWorld}.css';",
			"",
			"interface I${1:HelloWorld}Props {",
			"}",
			"interface I${1:HelloWorld}State {",
			"}",
			"",
			"class ${1:HelloWorld} extends React.Component<I${1:HelloWorld}Props, I${1:HelloWorld}State> {",
			"  constructor (props: I${1:HelloWorld}Props) {",
			"    super(props);",
			"    this.state = {",
			"    };",
			"  }",
			"",
			"  public render () {",
			"    return (",
			"      <div className=\"${1:HelloWorld}\">",
			"        <h1>${1:HelloWorld}</h1>",
			"      </div>",
			"    );",
			"  }",
			"}",
			"",
			"const mapStateToProps = (state: IState) => ({",
			"});",
			"",
			"const mapDispatchToProps = (dispatch: any) => ({",
			"});",
			"",
			"export default connect(mapStateToProps, mapDispatchToProps)(${1:HelloWorld});",
		]
	},

	// tests
	"describe": {
		"prefix": "describe-test",
		"body": [
			"describe('$1', () => {",
			"});"
		]
	},
	"it": {
		"prefix": "it-test",
		"body": [
			"it('$1', () => {",
			"});"
		]
	},
	"beforeEach": {
		"prefix": "beforeEach-test",
		"body": [
			"beforeEach(() => {",
			"\t$1",
			"});"
		]
	},
	"afterEach": {
		"prefix": "afterEach-test",
		"body": [
			"afterEach(() => {",
			"\t$1",
			"});"
		]
	},
	"expect-toBe": {
		"prefix": "expect-test",
		"body": "expect($1).${2:toBe}($3)",
	},
}